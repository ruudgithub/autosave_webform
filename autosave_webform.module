<?php
/**
 * @file
 * Implementation of the autosave functionality.
 *
 * @author Jaap Jansma (CiviCooP) <jaap.jansma@civicoop.org>
 *
 * @license http://www.gnu.org/licenses/agpl-3.0.html
 */

require_once 'autosave_webform.webform.inc';

/**
 * Implements hook_menu()
 *
 */
function autosave_webform_menu() {
  $items = array();

  $items['admin/config/content/webform/autosave'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Webform autosave settings',
    'description' => 'Configuration for autosave_webform module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autosave_webform_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'autosave_webform.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function autosave_webform_node_load($nodes, $types) {
  _autosave_webform_webform_node_load($nodes, $types);
}

/**
 * Implements hook_node_insert().
 */
function autosave_webform_node_insert($node) {
  _autosave_webform_webform_node_insert($node);
}

/**
 * Implements hook_node_update().
 */
function autosave_webform_node_update($node) {
  _autosave_webform_webform_node_update($node);
}

/**
 * Implements hook_node_delete().
 */
function autosave_webform_node_delete($node) {
  _autosave_webform_webform_node_delete($node);
}

/**
 * Implements hook_form_alter().
 */
function autosave_webform_form_alter(&$form, &$form_state, $form_id) {
  if ($autosave_settings = autosave_webform_is_form_autosaveable($form, $form_id, $form_state)) {
    // Add the necessary javascript.
    $settings = array(
      'form_id' => str_replace('_', '-', $form_id),
      'autosave_button' => '.autosave-button',
      'autosave_button_id' => 'edit-autosave-button',
      'timeout' => $autosave_settings['timeout'],
    );
    drupal_add_js(drupal_get_path('module', 'autosave_webform') . '/autosave_webform.js');
    drupal_add_js(array('autosave_webform' => $settings), 'setting');
    drupal_add_css(drupal_get_path('module', 'autosave_webform') . '/autosave_webform.css');

    // Add a hidden field with form hash for saving this form
    $form['autosave_form_'.$form_id.'_hash'] = array(
      '#type' => 'hidden',
      '#value' => $autosave_settings['form_hash'],
    );

    // Add a button for save draft.
    $form['buttons']['autosave'] = array(
      '#prefix' => '<div id="autosave-webform-wrapper">',
      '#suffix' => '</div>',
    );
    $form['buttons']['autosave']['autosave_button'] = array(
      '#type' => 'submit',
      '#value' => t('Save draft'),
      '#validate' => array(),
      '#attributes' => array(
        'class' => array('autosave-button'),
      ),
      '#ajax' => array(
        'wrapper' => str_replace('_', '-', $form_id),
        'callback' => 'autosave_webform_ajax_callback',
      ),
    );

    if (!empty($autosave_settings['limit-validation-errors'])) {
      $form['buttons']['autosave']['autosave_button']['#limit_validation_errors'] = array();
    }
		$form['actions']['clear'] = array(
			'#type' => 'submit',
			'#value' => t('Clear form data'),
			'#weight' => -10,
	    '#submit' => array("autosave_webform_clear_submit"),
	    '#validate' => '',
    	'#attributes' => array(
      	'formnovalidate' => "formnovalidate",
    	),
		);
    $form['actions']['autosave_webform_message'] = array(
      '#prefix' => '<span id="autosave_webform_message" style="display: none;">',
      '#suffix' => '</span>',
      '#markup' => '<div>saved</div>',
      '#weight' => 100,
    );

    if (empty($form_state['input']) && !empty($autosave_settings['auto-restore'])) {
      // Restore old data only when the form is not submitted.
      autosave_webform_restore($form, $form_state, $form_id, $autosave_settings['form_hash']);
    }

    // Add our own submit handler to clear the saved data after a submit.
    if (empty($autosave_settings['no-submit-handler'])) {
      $submit_function = 'autosave_webform_form_submit';
      if (!empty($autosave_settings['submit_function'])) {
        $submit_function = $autosave_settings['submit_function'];
      }
      $form['#submit'][] = $submit_function;
    }

    $form['#attributes']['class'][] = 'autosave-webform';
  }

  return $form;
}

/**
 * Submit handler for forms.
 *
 * Clears the saved data.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function autosave_webform_form_submit(array $form, array &$form_state) {
  global $user;
  $form_id = $form_state['build_info']['form_id'];
  $form_hash = $form_state['input']['autosave_form_'.$form_id.'_hash'];
  autosave_webform_clear_saved_data($form_id, $user->uid, $form_hash);
}

/**
 * Submit function to clear saved submission.
 */
function autosave_webform_clear_submit(array $form, array &$form_state) {
	global $user;
  $form_id = $form_state['build_info']['form_id'];
  $form_hash = $form_state['input']['autosave_form_'.$form_id.'_hash'];
	autosave_webform_clear_saved_data($form_id, $user->uid, $form_hash);
}

/**
 * Restore the previous saved values.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 * @param string $form_id
 *    The form id.
 * @param string $form_hash
 *    The form hash
 */
function autosave_webform_restore(array $form, array &$form_state, $form_id, $form_hash) {
  global $user;
  $form_id = str_replace("-", "_", $form_id);

  // Fetch the saved form, if any.
  $record = autosave_webform_get_saved_data($form_id, $user->uid, $form_hash);
  if ($record) {
    $data = unserialize($record->serialized);
    if (!is_array($data)) {
      $data = array();
    }
    if (isset($data['input']) && isset($data['input']['form_token'])) {
      unset($data['input']['form_token']);
    }
    if (isset($data['input'])) {
      $form_state['input'] = $data['input'];
      unset($form_state['input']['form_token']);
      if (isset($form['#token'])) {
        $form_state['input']['form_token'] = drupal_get_token($form['#token']);
      }
    }

    drupal_alter('autosavewebform_restore', $form, $form_id, $form_state, $data);
  }
}

/**
 * Clears the saved data record.
 *
 * @param string $form_id
 *    The form id.
 * @param int $uid
 *    The user ID.
 * @param string $form_hash
 *    The unique form hash of the saved data.
 */
function autosave_webform_clear_saved_data($form_id, $uid, $form_hash) {
  $result = db_delete("autosave_webform_forms")
    ->condition('form_id', str_replace('-', '_', $form_id))
    ->condition('uid', $uid)
    ->condition('form_hash', $form_hash)
    ->execute();
}

/**
 * Returns the previous saved data.
 *
 * @param string $form_id
 *    The form id.
 * @param int $uid
 *    The user ID.
 * @param string $form_hash
 *    The unique form hash of the saved data.
 *
 * @return array
 *    Returns the saved data record.
 */
function autosave_webform_get_saved_data($form_id, $uid, $form_hash) {
  static $forms = array();
  if (empty($forms[$form_id][$uid])) {
    // Fetch the saved form, if any.
    $forms[$form_id][$uid] = db_query("SELECT form_id, serialized, timestamp FROM {autosave_webform_forms} WHERE form_id = :form_id AND uid = :uid AND form_hash = :form_hash ORDER BY `timestamp` DESC LIMIT 1", array(
      ':form_id' => str_replace('-', '_', $form_id),
      ':uid' => $uid,
      ':form_hash' => $form_hash,
    ))->fetchObject();
  }
  return $forms[$form_id][$uid];
}

/**
 * Determines whether the form is enabled for autosaving.
 *
 * @param array $form
 *    The form.
 * @param string $form_id
 *    The form id.
 * @param array $form_state
 *    The form state.
 *
 * @return array|bool
 *    Returns false when the form is not saveable.
 *    Returns an array with settings when the form is saveable.
 */
function autosave_webform_is_form_autosaveable(array $form, $form_id, array $form_state) {
  $valid_form_ids = array();

  $valid_form_ids = module_invoke_all('autosavewebform_alter_autosaving_forms', $valid_form_ids, $form, $form_id, $form_state);

  $defaults = array(
    'no-submit-handler' => FALSE,
    'submit_function' => 'autosave_webform_form_submit',
    'auto-restore' => TRUE,
    'timeout' => 15,
    'limit-validation-errors' => TRUE,
    'form_hash' => '',
  );

  if (isset($valid_form_ids[$form_id]) && is_array($valid_form_ids[$form_id])) {
    return array_merge($defaults, $valid_form_ids[$form_id]);
  }

  if (in_array($form_id, $valid_form_ids)) {
    return $defaults;
  }
  return FALSE;
}

/**
 * Ajax callback for autosaving the form.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 *
 * @return array
 *    Returns the javascript command to show the saved message.
 */
function autosave_webform_ajax_callback(array $form, array &$form_state) {
  autosave_webform_save($form, $form_state);

  $commands = array();
  $replace = _autosave_webform_render_replace_on_save($form);
  foreach($replace as $selector => $html) {
    $commands[] = ajax_command_html($selector, $html);
  }
  $commands[] = ajax_command_html('#autosave_webform_message', t('Saved as draft'));
  $commands[] = ajax_command_invoke('#autosave_webform_message', 'autosave_webform_show_message');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Returns an array of elements which should be replaced in the UI after saving
 *
 * The key of the array is the css selector (e.g. .form-iten-multifile-field-1)
 * The value is the new html
 *
 * @param array $form
 *   The form.
 * @param array $parent_elements
 *   The parent elements.
 *
 * @return array
 *   Array with selectors as keys and html as values.
 */
function _autosave_webform_render_replace_on_save(array $form, $parent_elements=array()) {
  $return = array();
  $parent_elements[] = $form;
  foreach($form as $key => $element) {
    if ($selector = _autosave_webform_replace_on_save($element, $parent_elements)) {
      $html = drupal_render($form);
      $return[$selector] = $html;
    } elseif (is_array($element)) {
      $sub_return = _autosave_webform_render_replace_on_save($element, $parent_elements);
      $return = array_merge($return, $sub_return);
    }
  }
  return $return;
}

/**
 * Returns the key for replacing or false when element does not need replacement.
 *
 * @param mixed $element
 *   The element.
 * @param array $parent_elements
 *   The parent elements.
 *
 * @return bool|string
 *   The selector for replacement or false when element does not need replacement.
 */
function _autosave_webform_replace_on_save($element, $parent_elements) {
  if ($key = _autosave_webform_is_multifile($element, $parent_elements)) {
    return $key;
  }
  return false;
}

/**
 * Checks whether the element is a multifile webform element.
 *
 * In case of a multifile element
 *
 * @param mixed $element
 *   The element.
 * @param array $parent_elements
 *   The parent elements.
 *
 * @return bool|string
 *   The selector for replacement or false when element does not need replacement.
 */
function _autosave_webform_is_multifile($element, $parent_elements) {
  if (is_array($element) && isset($element['#type']) && $element['#type'] == 'file' && isset($element['#webform_component']) && $element['#webform_component']['type'] == 'multifile') {
    $keys = array();
    foreach($parent_elements as $parent) {
      if (isset($parent['#webform_component'])) {
        $keys[] = '-'.$parent['#webform_component']['form_key'];
      }
    }
    $key = implode("-", $keys);
    $key = str_replace("_", "-", $key);

    return '.webform-component-'.$key;

  }
  return false;
}

/**
 * Save the form.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function autosave_webform_save(array $form, array &$form_state) {
  global $user;

  $data = array();
  $form_id = $form_state['build_info']['form_id'];
  $form_hash = $form_state['input']['autosave_form_'.$form_id.'_hash'];
  $data['input'] = $form_state['input'];
  unset($data['input']['autosave_form_'.$form_id.'_hash']);

  drupal_alter('autosavewebform_save', $form, $form_id, $form_state, $data);

  $t = db_transaction();
  try {
    $num_updated = db_update('autosave_webform_forms')
                    ->fields(array(
                      'timestamp' => time(),
                      'serialized' => serialize($data),
                    ))
                    ->condition('form_id', $form_id, '=')
                    ->condition('uid', $user->uid, '=')
                    ->condition('form_hash', $form_hash,'=')
                    ->execute();
  } catch (Exception $e) {
    $num_updated = 0;
    $t->rollBack();
  }

  if ($num_updated == 0) {
    $t = db_transaction();
    try {
      db_insert('autosave_webform_forms')
        ->fields(array(
          'form_id' => $form_id,
          'uid' => $user->uid,
          'form_hash' => $form_hash,
          'timestamp' => time(),
          'serialized' => serialize($data),
        ))
        ->execute();
    } catch (Exception $e) {
      $num_updated = 0;
      $t->rollBack();
    }
  }
}

/**
 * Implements hook_cron()
 *
 * Cleanup saved webform data older then 3 months
 * The query runs at most once a day (or less if cron is scheduled less regularly)
 */
function autosave_webform_cron() {
  //Get cron last run date
  $lastrun_cron = variable_get('cron_last')?variable_get('cron_last'):'';
  $lastrun_date = date('Ymd',$lastrun_cron);
  $current_date = date('Ymd');

  $autoremove_active = variable_get('autosave_webform_autoremovedataactive')?variable_get('autosave_webform_autoremovedataactive'):0;

  $table_name = 'autosave_webform_forms';

  //Make sure this cron job runs at most once a day
  if ($autoremove_active == TRUE && ($current_date > $lastrun_date)) {
    $t = db_transaction();
    try {
      //Delete all autosave information older then 90 days (about 3 months), used days to make it a fixed time frame for odd and even months
      $period = variable_get('autosave_webform_autoremoveperiod')?variable_get('autosave_webform_autoremoveperiod'):'3';

      switch($period) {
        case 1:
          db_delete($table_name)->condition('timestamp', strtotime('-30 days'),'<')->execute();
          break;
        case 3:
          db_delete($table_name)->condition('timestamp', strtotime('-90 days'),'<')->execute();
          break;
        case 6:
          db_delete($table_name)->condition('timestamp', strtotime('-180 days'),'<')->execute();
          break;
        case 12:
          db_delete($table_name)->condition('timestamp', strtotime('-1 year'),'<')->execute();
          break;
        default:
          db_delete($table_name)->condition('timestamp', strtotime('-90 days'),'<')->execute();
          break;
      }
    } catch (Exception $e) {
      $t->rollBack();
      watchdog(basename(__FILE__), $e, NULL, WATCHDOG_ERROR, '');
    }

    $t = db_transaction();
    try {
      if (db_driver() == 'mysql') {
        try {
          db_query("OPTIMIZE TABLE {$table_name}")->execute();
        }
        catch (Exception $e) {
          watchdog_exception('type', $e);
        }
      }
      elseif (db_driver() == 'pgsql') {
        try {
          db_query("VACUUM ANALYZE {$table_name}")->execute();
        }
        catch (Exception $e) {
          watchdog_exception('type', $e);
        }
      }
    } catch (Exception $e) {
      $t->rollBack();
      watchdog(basename(__FILE__), $e, NULL, WATCHDOG_ERROR, '');
    }
  } else {
    //same day so nothing to do
  }
}